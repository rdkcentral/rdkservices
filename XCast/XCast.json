{
    "$schema": "https://raw.githubusercontent.com/rdkcentral/rdkservices/main/Tools/json_generator/schemas/interface.schema.json",
    "jsonrpc": "2.0",
    "info": {
        "title": "XCast API", 
        "class": "XCast", 
        "description": "The XCast plugin provides methods and events to support launching applications from an external source (for example, DIAL). The RT implementation should use a RT service name that complies to the convention `com.comcast.<name>cast`. For example, `com.comcast.xdialcast` is used by `xdialserver`."
    },
    "common": {
        "$ref": "../common/common.json"
    },
    "definitions": {
        "enabled": {
            "summary":"`true` for enabled or `false` for disabled",
            "type":"boolean",
            "example": true
        },
        "applicationName": {
            "summary":"Registered application name",
            "type":"string",
            "example": "NetflixApp"
        },
        "applicationId":{
            "summary":"Application instance ID",
            "type":"string",
            "example":"1234"
        },
        "friendlyname": {
            "summary": "The friendly name of the device which used to display on the client device list",
            "type": "string",
            "example": "Friendly name"
        },
        "manufacturername": {
            "summary": "The Manufacturer name of the device which used to update in dd.xml",
            "type": "string",
            "example": "Manufacturer name"
        },
        "modelname": {
            "summary": "The Model name of the device which used to update in dd.xml",
            "type": "string",
            "example": "Model name"
        },
        "standbybehavior": {
            "summary": "whether to remain active or inactive during standby mode",
            "enum": [
                "active",
                "inactive"
            ],
            "type": "string",
            "example": "active"
        },
        "names": {
            "summary": "case-sensitive. Group of acceptable names for a related application. Application name in request URI must have exact match to one of the names. Otherwise, matching prefix is needed. If the application name in request URI does not match any names or prefixes, then the request shall fail.",
            "type": "array",
            "items": {
               "type": "string",
               "example": "Youtube"
            }
        },
        "prefixes": {
            "summary": "If the application name in request URI does not match the list of names, it must contain one of the prefixes.If the application name in request URI does not match any names or prefixes, then the request shall fail.",
            "type": "array",
            "items": {
               "type": "string",
               "example": "myYouTube"
            }
        },
        "cors": {
            "summary": "a set of origins allowed for the application. This must not be empty",
            "type": "array",
            "items": {
               "type": "string",
               "example": ".youtube.com"
            }
        },
        "properties": {
            "summary": "specific application properties applicable to app management. If not present in descriptor, the default value is assumed",
            "type": "object",
            "properties": {
                "allowStop": {
                    "summary": "is the application (matching name list or prefix list) allowed to stop (no PID presence) after launched",
                    "type": "boolean",
                    "example": true
                }
            },
            "required":[
                "allowStop"
            ]
        },
        "launchParameters": {
            "summary": "launchParameters that application wants dial-server to append before sending the request to launch application",
            "type": "object",
            "properties": {
                "query": {
                    "summary": "query string that need to be appended in launch request",
                    "type": "string",
                    "example": "source_type=12"
                },
                "payload": {
                    "summary": "optional payload string that need to be appended in launch request",
                    "type": "string",
                    "example": ""
                }
             },
            "required":[
                "query",
                "payload"
            ]
        },
        "applicationsList": {
            "summary": "Json array with one or more application details to register",
            "type": "array",
            "items": {
               "type": "object",
               "properties": {
                    "names": {
                        "$ref": "#/definitions/names"
                    },
                    "prefixes": {
                        "$ref": "#/definitions/prefixes"
                    },
                    "cors": {
                       "$ref": "#/definitions/cors"
                    },
                    "properties": {
                        "$ref": "#/definitions/properties"
                    },
                    "launchParameters": {
                        "$ref": "#/definitions/launchParameters"
                    }
                },
                "required":[
                    "names",
                    "cores"
                ]
            }
        },
        "version": {
            "summary": "DIAL protocol version",
            "type": "string",
            "example": "2.2.1"
        }
    },
    "methods": {
        "getApiVersionNumber":{
            "summary": "Gets the API version number.",
            "result": {
                "type":"object",
                "properties": {
                    "version": {
                        "description": "a version number",
                        "type":"integer",
                        "example": 1
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                }, 
                "required": [
                    "version",
                    "success"
                ]               
            }
        },
        "getEnabled":{
            "summary": "Reports whether xcast plugin is enabled or disabled.",
            "result": {
                "type":"object",
                "properties": {
                    "enabled": {
                        "$ref": "#/definitions/enabled"
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                }, 
                "required": [
                    "enabled",
                    "success"
                ]               
            }
        },
        "getFriendlyName":{
            "deprecated" : true,
            "referenceUrl" : " https://rdkcentral.github.io/rdkservices/#/api/SystemPlugin?id=getFriendlyName",
            "summary": "Returns the friendly name set by setFriendlyName API.",
            "result": {
                "type":"object",
                "properties": {
                    "friendlyname": {
                        "$ref": "#/definitions/friendlyname"
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                }, 
                "required": [
                    "friendlyname",
                    "success"
                ]               
            }
        },
        "getManufacturerName":{
            "summary": "Returns the friendly name set by setManufacturerName API.",
            "result": {
                "type":"object",
                "properties": {
                    "manufacturer": {
                        "$ref": "#/definitions/manufacturername"
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
		},
                "required": [
                    "manufacturer",
                    "success"
		]
            }
        },
        "getModelName":{
            "summary": "Returns the friendly name set by setModelName API.",
            "result": {
                "type":"object",
                "properties": {
                    "model": {
                        "$ref": "#/definitions/modelname"
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
		},
                "required": [
                    "model",
                    "success"
		]
            }
        },
        "getProtocolVersion":{
            "summary": "Returns the DIAL protocol version supported by the server.",
            "result": {
                "type":"object",
                "properties": {
                    "version": {
                        "$ref": "#/definitions/version"
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "version",
                    "success"
                ]
            }
        },
        "getStandbyBehavior":{
            "summary": "Return current standby behavior option string set uisng setStandbyBehavior or default value .",
            "result": {
                "type":"object",
                "properties": {
                    "standbybehavior": {
                        "$ref": "#/definitions/standbybehavior"
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                }, 
                "required": [
                    "standbybehavior",
                    "success"
                ]               
            }
        },  
        "onApplicationStateChanged":{
            "summary": "Provides notification whenever an application changes state due to user activity, an internal error, or other reasons. For singleton applications, the `applicationId` parameter is optional. If an application request is denied, fails to fulfill, or the state change is triggered by an internal error, then a predefined error string should be included. This error may be translated to an XCast client.  \n\nThe following table provides a client error mapping example: \n\n| Error | Description | HTTP Status Codes |  \n| :-------- | :-------- | :-------- |   \n| `none` | The request (start/stop) is fulfilled successfully | HTTP 200 OK |  \n| `forbidden` | The user is not allowed to change the state of the application. This is not related to user account authentication of the native application | HTTP 403 Forbidden |  \n| `unavailable` | The target native application is not available on the device | HTTP 404 Not Found |  \n| `invalid` | The request is invalid (bad parameter for example) | HTTP 400 Bad Request |  \n| `internal` | The server failed to fulfill the request (server error) | HTTP 500 Internal |",
            "params": {
                "type":"object",
                "properties": {
                    "applicationName": {
                        "$ref": "#/definitions/applicationName"
                    },
                    "state":{
                        "summary":"A predefined application state. Either `running`, `stopped`, `hidden`, or `suspended` (introduced in DIAL 2.1, `suspended` is a synonym to `hidden`).",
                        "type":"string",
                        "example":"running"
                    },
                    "applicationId":{
                        "$ref": "#/definitions/applicationId"
                    },
                    "error":{
                        "summary":"A predefined error from the cast target application. Either `none`, `forbidden` `unavailable` `invalid` or `internal`",
                        "type":"string",
                        "example":""
                    }
                },
                "required": [
                    "applicationName",
                    "state"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "registerApplications": {
            "summary": "Registers an application. This allows to whitelist the apps which support dial service. To dynamically update the app list, same API should be called with the updated list. so that app list will be appended to the existing XCast white list. If a DIAL request for an unregistered application is received by DIAL server, the request will be denied (HTTP 404) per DIAL specification. Optional fields need not be included, or can be included with empty values.",
            "params": {
                "type":"object",
                "properties": {
                    "applications": {
                        "$ref": "#/definitions/applicationsList"
                    }
                }
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "unregisterApplications": {
            "summary": "Unregisters an application. This API allows to remove the specified applist from the XCast whitelist. To dynamically delete the specific app list, same API should be called with the app list to remove. so that mentioned app list will be removed from the XCast whitelist. Calling this API with empty list will clear the Xcast Whitelist",
            "params": {
                "type":"object",
                "properties": {
                    "applications": {
                        "summary": "One or more application name to unregister",
                        "type": "string",
                        "example": ["YouTube","Netflix"]
                    }
                },
                "required": [
                    "applications"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "setEnabled":{
            "summary": "Enable or disable XCAST service.  When disabled, the customer should not be able to discover CPE as a cast target for any client application. After enable(true) server application manger must re-register all app that are available for user to cast. The enabled status is not persisted on device after each reboot or reconnect application should call setEnalbed to initialize XCast thunder plugin.",
            "params": {
                "type":"object",
                "properties": {
                    "enabled": {
                        "$ref": "#/definitions/enabled"
                    }
                },
                "required": [
                    "enabled"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "setFriendlyName":{
            "deprecated" : true,
            "referenceUrl" : " https://rdkcentral.github.io/rdkservices/#/api/SystemPlugin?id=setFriendlyName",
            "summary": "Sets the friendly name of device. It allows an application to override the default friendly name value with the friendly name passed as an argument. The provided name  should not be empty. If a user provided name is not available, the caller of the API should use the default name partnerId+Model  (or any other agreed default name) as the parameter. After initialization, XCastService should not be activated until setFriendlyName() is invoked. Frinedly name is not persisted on device after each reboot or reconnect application should call API to update the friendlyName",
            "params": {
                "type":"object",
                "properties": {
                    "friendlyname": {
                        "$ref": "#/definitions/friendlyname"
                    }
                },
                "required": [
                    "friendlyname"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "setManufacturerName":{
            "summary": "Sets the Manufacturer name of device. It allows an application to override the default manufacturer name value with the manufacturer name passed as an argument. The provided name  should not be empty. Manufacturer name is not persisted on device after each reboot or reconnect application should call API to update the manufacturerName",
            "params": {
                "type":"object",
                "properties": {
                    "manufacturer": {
                        "$ref": "#/definitions/manufacturername"
                    }
                },
                "required": [
                    "manufacturer"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
	"setModelName":{
            "summary": "Sets the Model name of device. It allows an application to override the default model name value with the model name passed as an argument. The provided name  should not be empty. Model name is not persisted on device after each reboot or reconnect application should call API to update the modelName",
            "params": {
                "type":"object",
                "properties": {
                    "model": {
                        "$ref": "#/definitions/modelname"
                    }
                },
                "required": [
                    "model"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "setStandbyBehavior":{
            "summary": "Sets the expected xcast behavior in standby mode. It allows an application to override controls on xcast behavior in standby mode. The default behavior in STANDBY mode is inactive, so client device can not discover the server. When STANDBY behavior is active, client device can discover the CPE device and perform the launch operation. Upon reeiving the launch request device will transitioned from STANDBY to ON mode",
            "params": {
                "type":"object",
                "properties": {
                    "standbybehavior": {
                        "$ref": "#/definitions/standbybehavior"
                    }
                },
                "required": [
                    "standbybehavior"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        }
    },
    "events": {
        "onApplicationHideRequest": {
            "summary": "Triggered when the cast service receives a hide request from a client. This is a request to hide an application from the foreground (suspend/run in background).  \nUpon hiding the application, the resident application is responsible for calling the `onApplicationStateChanged` method if hiding the application changes its running state.",
            "params": {
                "type":"object",
                "properties": {
                    "applicationName": {
                        "$ref": "#/definitions/applicationName"
                    },
                    "applicationId": {
                        "$ref": "#/definitions/applicationId"
                    }
                },
                "required": [
                    "applicationName",
                    "applicationId"
                ]
            }
        },
        "onApplicationLaunchRequest": {
            "summary": "Triggered when the cast service receives a launch request from a client. This is a request to launch an application. The resident application can determine if the application should be launched based on the current context. If the application is not already running, the requested application is started. If the application is already running and is in background mode, the requested application enters foreground mode (`optimus::running`, `xcast::running`). If the application is already in foreground mode, the request does not change the application state.  \nUpon launching the application, the resident application is responsible for calling the `onApplicationStateChanged` method, which sends the notification back to the XCast client (for example, `Dial`).",
            "params": {
                "type":"object",
                "properties": {
                    "applicationName": {
                        "$ref": "#/definitions/applicationName"
                    },
                    "parameters": {
                        "summary":"The format and interpretation is determined between the application launcher or cast target and the cast client for each application. For example, a Netflix DIAL-client returns a `pluginURL` parameter with the application launch string. A Youtube DIAL-client returns a `url` parameter with the application launch string.",
                        "type":"object",
                        "properties": {
                            "pluginUrl":{
                                "summary":"Application launch string",
                                "type":"string",
                                "example": "https://www.netflix.com"
                            }
                        }
                    }
                },
                "required": [
                    "applicationName",
                    "parameters"
                ]
            }
        },
        "onApplicationResumeRequest": {
            "summary": "Triggered when the cast service receives a resume request from a client. This is a request to resume an application.  \nUpon resuming the application, the resident application is responsible for calling the `onApplicationStateChanged` method.",
            "params": {
                "type":"object",
                "properties": {
                    "applicationName": {
                        "$ref": "#/definitions/applicationName"
                    },
                    "applicationId": {
                        "$ref": "#/definitions/applicationId"
                    }
                },
                "required": [
                    "applicationName",
                    "applicationId"
                ]
            }
        },
        "onApplicationStateRequest": {
            "summary": "Triggered when the cast service needs an update of the application state.  \nThe resident application is responsible for calling the `onApplicationStateChanged` method indicating the current state.",
            "params": {
                "type":"object",
                "properties": {
                    "applicationName": {
                        "$ref": "#/definitions/applicationName"
                    },
                    "applicationId": {
                        "$ref": "#/definitions/applicationId"
                    }
                },
                "required": [
                    "applicationName",
                    "applicationId"
                ]
            }
        },
        "onApplicationStopRequest": {
            "summary": "Triggered when the cast service receives a stop request from a client. This is a request to stop an application. If the application is already running and either in foreground or background mode, then the requested application is destroyed (`optimus::destroyed`, `xcast::stopped`). If the application is not running, this request triggers an error `onApplicationStateChanged` message with `Invalid`.  \nUpon stopping the application, the resident application is responsible for calling the `onApplicationStateChanged` method.",
            "params": {
                "type":"object",
                "properties": {
                    "applicationName": {
                        "$ref": "#/definitions/applicationName"
                    },
                    "applicationId": {
                        "$ref": "#/definitions/applicationId"
                    }
                },
                "required": [
                    "applicationName",
                    "applicationId"
                ]
            }
        }
    }
}
