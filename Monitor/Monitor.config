set(autostart ${PLUGIN_MONITOR_AUTOSTART})

if(PLUGIN_MONITOR_STARTUPORDER)
set (startuporder ${PLUGIN_MONITOR_STARTUPORDER})
endif()

map()
end()
ans(configuration)

if(PLUGIN_MONITOR_WEBKITBROWSER)
    map()
        kv(callsign WebKitBrowser)
        kv(memory 5)
        kv(memorylimit ${PLUGIN_MONITOR_WEBKITBROWSER_MEMORYLIMIT})
        kv(operational 1)
        key(restart)
        map()
            kv(window 60)
            kv(limit 3)
        end()
    end()
    ans(WEBKITBROWSER_MONITOR_CONFIG)
    map_append(${configuration} observables ___array___)
    map_append(${configuration} observables ${WEBKITBROWSER_MONITOR_CONFIG})
endif()

if(PLUGIN_MONITOR_WEBKITBROWSER_YOUTUBE)
    map()
        kv(callsign YouTube)
        kv(memory 5)
        kv(memorylimit ${PLUGIN_MONITOR_WEBKITBROWSER_YOUTUBE_MEMORYLIMIT})
        kv(operational 1)
        key(restart)
        map()
            kv(window 60)
            kv(limit 3)
        end()
    end()
    ans(YOUTUBE_MONITOR_CONFIG)
    map_append(${configuration} observables ___array___)
    map_append(${configuration} observables ${YOUTUBE_MONITOR_CONFIG})
endif()

if(PLUGIN_MONITOR_AMAZON)
    map()
        kv(callsign Amazon)
        kv(memory 5)
        kv(memorylimit ${PLUGIN_MONITOR_AMAZON_MEMORYLIMIT})
        kv(operational 1)
        key(restart)
        map()
            kv(window 60)
            kv(limit 3)
        end()
    end()
    ans(AMAZON_MONITOR_CONFIG)
    map_append(${configuration} observables ___array___)
    map_append(${configuration} observables ${AMAZON_MONITOR_CONFIG})
endif()

if(PLUGIN_MONITOR_COBALT)
    map()
        kv(callsign Cobalt)
        kv(memory 5)
        kv(memorylimit ${PLUGIN_MONITOR_COBALT_MEMORYLIMIT})
        kv(operational 1)
        key(restart)
        map()
            kv(window 60)
            kv(limit 3)
        end()
    end()
    ans(COBALT_MONITOR_CONFIG)
    map_append(${configuration} observables ___array___)
    map_append(${configuration} observables ${COBALT_MONITOR_CONFIG})
endif()

if(PLUGIN_MONITOR_WEBKITBROWSER_APPS)
    map()
        kv(callsign Apps)
        kv(memory 5)
        kv(memorylimit ${PLUGIN_MONITOR_WEBKITBROWSER_APPS_MEMORYLIMIT})
        kv(operational 1)
        key(restart)
        map()
            kv(window 60)
            kv(limit 3)
        end()
    end()
    ans(APPS_MONITOR_CONFIG)
    map_append(${configuration} observables ___array___)
    map_append(${configuration} observables ${APPS_MONITOR_CONFIG})
endif()

if(PLUGIN_MONITOR_WEBKITBROWSER_UX)
    map()
        kv(callsign UX)
        kv(memory 5)
        kv(memorylimit ${PLUGIN_MONITOR_WEBKITBROWSER_UX_MEMORYLIMIT})
        kv(operational 1)
        key(restart)
        map()
            kv(window 60)
            kv(limit 3)
        end()
    end()
    ans(UX_MONITOR_CONFIG)
    map_append(${configuration} observables ___array___)
    map_append(${configuration} observables ${UX_MONITOR_CONFIG})
endif()

if(PLUGIN_MONITOR_NETFLIX)
    map()
        kv(callsign Netflix)
        kv(memory 5)
        kv(memorylimit ${PLUGIN_MONITOR_NETFLIX_MEMORYLIMIT})
        kv(operational 1)
        key(restart)
        map()
            kv(window 60)
            kv(limit 3)
        end()
    end()
    ans(NETFLIX_MONITOR_CONFIG)
    map_append(${configuration} observables ___array___)
    map_append(${configuration} observables ${NETFLIX_MONITOR_CONFIG})
endif()

if(PLUGIN_MONITOR_OUTOFPROCESS)
    map()
        kv(callsign OutOfProcessPlugin)
        kv(memory 5)
        kv(memorylimit 3000)
        kv(operational 1)
        key(restart)
        map()
            kv(window 60)
            kv(limit 3)
        end()
    end()
    ans(OUTOFPROCESSTEST_MONITOR_CONFIG)
    map_append(${configuration} observables ___array___)
    map_append(${configuration} observables ${OUTOFPROCESSTEST_MONITOR_CONFIG})
endif()

if(PLUGIN_MONITOR_TESTUTILITY)
    map()
        kv(callsign TestUtility)
        kv(memory 5)
        kv(memorylimit 3000)
        kv(operational 1)
        key(restart)
        map()
            kv(window 60)
            kv(limit 3)
        end()
    end()
    ans(TESTUTILITY_MONITOR_CONFIG)
    map_append(${configuration} observables ___array___)
    map_append(${configuration} observables ${TESTUTILITY_MONITOR_CONFIG})
endif()

if(PLUGIN_MONITOR_OPENCDMI)
    map()
        kv(callsign OCDM)
        kv(operational 1)
        key(restart)
        map()
            kv(window 60)
            kv(limit 3)
        end()
    end()
    ans(OPENCDMI_MONITOR_CONFIG)
    map_append(${configuration} observables ___array___)
    map_append(${configuration} observables ${OPENCDMI_MONITOR_CONFIG})
endif()

if(PLUGIN_MONITOR_SYSTEMAUDIOPLAYER)
    map()
        kv(callsign org.rdk.SystemAudioPlayer)
        kv(operational 1)
        key(restart)
        map()
            kv(window 60)
            kv(limit 3)
        end()
    end()
    ans(SYSTEMAUDIOPLAYER_MONITOR_CONFIG)
    map_append(${configuration} observables ___array___)
    map_append(${configuration} observables ${SYSTEMAUDIOPLAYER_MONITOR_CONFIG})
endif()

if(PLUGIN_MONITOR_WEBKITBROWSER_RESIDENT_APP)
    map()
        kv(callsign ResidentApp)
        kv(memory 5)
        kv(memorylimit ${PLUGIN_MONITOR_WEBKITBROWSER_RESIDENT_APP_MEMORYLIMIT})
        kv(operational 1)
        key(restart)
        map()
            kv(window 60)
            kv(limit 3)
        end()
    end()
    ans(RESIDENT_APP_MONITOR_CONFIG)
    map_append(${configuration} observables ___array___)
    map_append(${configuration} observables ${RESIDENT_APP_MONITOR_CONFIG})
endif()

if(PLUGIN_MONITOR_NETWORKMANAGER)
    map()
        kv(callsign org.rdk.NetworkManager)
        kv(memory 5)
        kv(memorylimit ${PLUGIN_MONITOR_NETWORKMANAGER_MEMORYLIMIT})
        kv(operational 1)
        key(restart)
        map()
            kv(window 60)
            kv(limit 60)
        end()
    end()
    ans(NETWORK_MANAGER_MONITOR_CONFIG)
    map_append(${configuration} observables ___array___)
    map_append(${configuration} observables ${NETWORK_MANAGER_MONITOR_CONFIG})
endif()

if(PLUGIN_MONITOR_INSTANCES_LIST)

    # 'PLUGIN_MONITOR_INSTANCES_LIST' contains a semi-colon (';') separated list of Monitor observable
    # instances. In turn, each instance is a comma (',') separated list defining an observable instance
    # element ("callsign,memory,memorylimit,operational,window,limit"), where:
    # - "callsign": The callsign/name of the plugin to be monitored.
    # - "memory": Interval in seconds used for checking the plugin's memory usage.
    #    If 0, means don't check memory.
    # - "memorylimit": Value in KiB above which memory usage is considered excessive.
    #    Ignored if "memory" is zero.
    # - "operational": Interval in seconds used for checking plugin's operational state.
    # - "window": Interval in seconds considered for callsign restart throttling.
    # - "limit": Maximum number of times the plugin can be restarted within the "window" time.
    # More details of the parameters is available at https://github.com/rdkcentral/rdkservices/tree/sprint/2101/Monitor/doc

    map_append(${configuration} observables ___array___)
    foreach(instance ${PLUGIN_MONITOR_INSTANCES_LIST})
        string(REPLACE "," ";" instance_conf ${instance})

        set(instance_conf_list_required_length 6)
        list(LENGTH instance_conf instance_conf_list_length)
        if (NOT instance_conf_list_length EQUAL instance_conf_list_required_length)
            message(FATAL_ERROR "Instance conf '${instance}': Must have ${instance_conf_list_required_length} entries 'callsign,memory,memorylimit,operational,window,limit', but only has ${instance_conf_list_length} entries")
        endif()

        list(GET instance_conf 0 name)
        list(GET instance_conf 1 memory)
        list(GET instance_conf 2 memorylimit)
        list(GET instance_conf 3 operational)
        list(GET instance_conf 4 window)
        list(GET instance_conf 5 limit)

        map()
            kv(callsign ${name})
            if(NOT "${memory}" STREQUAL "0")
                kv(memory ${memory})
                kv(memorylimit ${memorylimit})
            endif()
            kv(operational ${operational})
            key(restart)
            map()
                kv(window ${window})
                kv(limit ${limit})
            end()
        end()
        ans(monitor_conf)
        map_append(${configuration} observables ${monitor_conf})
    endforeach()
endif()
