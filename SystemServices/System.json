{
    "$schema": "https://raw.githubusercontent.com/rdkcentral/rdkservices/main/Tools/json_generator/schemas/interface.schema.json",
    "jsonrpc": "2.0",
    "info": {
        "title": "System API", 
        "class": "SystemServices",
        "description": "The `System` plugin is used to manage various system-level features such as power settings and firmware updates."
    },
    "common": {
        "$ref": "../common/common.json"
    },
    "definitions": {
        "key": {
            "summary": "The cache key",
            "type": "string",
            "example": "sampleKey"
        },
        "GUID": {
            "summary": "A unique identifier",
            "type": "string",
            "example": "1234abcd"
        },
        "asyncResponse": {
            "summary": "Whether the event notification succeeded",
            "type": "boolean",
            "example": true
        },
        "timestamp": {
            "summary": "The last reboot time",
            "type": "string",
            "example": "20200128083540"
        },
        "reason": {
            "summary": "The reboot reason",
            "type": "string",
            "example": "FIRMWARE_FAILURE"
        },
        "temperature": {
            "summary": "The temperature",
            "type": "string",
            "example": "48.000000"
        },
        "enabled": {
            "summary": "Enabled (`true`) or disabled (`false`)",
            "type": "boolean",
            "example": false
        },
        "friendlyName": {
            "summary": "The friendly name of the device which used to display on the client device list",
            "type": "string",
            "example": "My Device"
        },
        "modeInfo": {
            "summary": "The mode information",
            "type": "object",
            "properties": {
                "mode":{
                    "$ref": "#/definitions/mode"
                },
                "duration":{
                    "summary": "The duration",
                    "type":"integer",
                    "example": 0
                }
            },
            "required": [
                "mode",
                "duration"
            ]
        },
        "mode": {
            "summary": "The mode",
            "enum": [
                "NORMAL",
                "EAS",
                "WAREHOUSE"
            ],
            "type": "string",
            "example": "NORMAL"
        },
        "nwStandby": {
            "summary": "Whether `WakeOnLAN` and `WakeOnWLAN` is supported (`true`); otherwise, `false`",
            "type": "boolean",
            "example": false
        },
        "pattern": {
            "summary": "Bootloader pattern mode",
            "enum": [
                "NORMAL",
                "SILENT",
                "SILENT_LED_ON"
            ],
            "type": "string",
            "example": "NORMAL"
        },
        "powerState": {
            "summary": "The power state",
            "enum": [
                "STANDBY",
                "DEEP_SLEEP",
                "LIGHT_SLEEP",
                "ON"
            ],
            "type": "string",
            "example": "ON"
        },
        "wakeupSources": {
            "summary": "Array of Key value pair with wake up sources and its configurations",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "WAKEUPSRC_VOICE": {
                        "description": "Voice Wake up",
                        "type":"boolean",
                        "example": true
                    },
                        "WAKEUPSRC_PRESENCE_DETECTION": {
                        "description": "Presense detection wake up",
                        "type":"boolean",
                        "example": true
                    },
                    "WAKEUPSRC_BLUETOOTH": {
                        "description": "Bluetooth Wakeup",
                        "type":"boolean",
                        "example": true
                    },
                    "WAKEUPSRC_WIFI": {
                        "description": "WiFi Wake up",
                        "type":"boolean",
                        "example": true
                    },
                    "WAKEUPSRC_IR": {
                        "description": "IR Remote Wake up",
                        "type":"boolean",
                        "example": true
                    },
                    "WAKEUPSRC_POWER_KEY": {
                        "description": "Power Button Wake up - GPIO",
                        "type":"boolean",
                        "example": true
                    },
                    "WAKEUPSRC_CEC": {
                        "description": "HDMI CEC commadn Wake up",
                        "type":"boolean",
                        "example": true
                    },
                    "WAKEUPSRC_LAN": {
                        "description": "LAN wake up",
                        "type":"boolean",
                        "example": true
                    },
                    "WAKEUPSRC_TIMER": {
                        "description": "TImer Wake up",
                        "type":"boolean",
                        "example": true
                    }
                }
            }
        },
        "preferredStandbyMode": {
            "summary": "The standby mode",
            "enum": [
                "LIGHT_SLEEP",
                "DEEP_SLEEP"
            ],
            "type": "string",
            "example": "DEEP_SLEEP"
        },
        "WARN": {
            "summary": "The warning threshold",
            "type": "string",
            "example": "100.000000"
        },
        "MAX": {
            "summary": "The max temperature threshold",
            "type": "string",
            "example": "110.000000"
        },
        "timeZone": {
            "summary": "The timezone",
            "type": "string",
            "example": "America/New_York"
        },
        "timeZoneAccuracy": {
            "summary": "The timezone accuracy",
            "enum": [
                "INITIAL",
                "INTERIM",
                "FINAL"
            ],
            "type": "string",
            "example": "INITIAL"
        },
        "seconds": {
            "summary": "The deep sleep timeout in seconds",
            "type": "integer",
            "example": 3
        },
        "firmwareUpdateState": {
            "summary": "The state",
            "enum": [
                "Uninitialized",
                "Requesting",
                "Downloading",
                "Failed",
                "DownLoad Complete",
                "Validation Complete",
                "Preparing to Reboot"
            ],
            "type": "integer",
            "example": 5
        },
        "source": {
            "summary": "The source of the reboot",
            "type": "string",
            "example": "SystemPlugin"
        },
        "Opt-Out": {
            "summary": "`true` for opt-out, otherwise `false`",
            "type": "boolean",
            "example": false
        },
        "accountInfo": {
            "type": "object",
            "properties": {
                "accountId": {
                    "summary": "Account Id",
                    "type": "string",
                    "example": "1000000000000000000"
                },
                "x1DeviceId": {
                    "summary": "X1 Device Id",
                    "type": "string",
                    "example": "1000000000000000000"
                },
                "XCALSessionTokenAvailable": {
                    "type": "boolean"
                },
                "experience": {
                    "summary": "Experience",
                    "type": "string",
                    "example": "X1"
                },
                "deviceMACAddress": {
                    "summary": "Device MAC Address",
                    "type": "string",
                    "example": "44:AA:F5:39:D3:42"
                },
                "firmwareUpdateDisabled": {
                    "type": "boolean"
                }
            },
            "required": []
        },
        "webBrowser": {
            "type": "object",
            "properties": {
                "browserType": {
                    "type": "string",
                    "example": "WPE"
                },
                "version": {
                    "type": "string",
                    "example": "1.0.0.0"
                },
                "userAgent": {
                    "type": "string",
                    "example": "Mozilla/5.0 (Linux; x86_64 GNU/Linux) AppleWebKit/601.1 (KHTML, like Gecko) Version/8.0 Safari/601.1 WPE"
                }
            },
            "required": [
                "browserType",
                "userAgent",
                "version"
            ]
        },
        "deviceInfo": {
            "type": "object",
            "properties": {
                "quirks": {
                    "summary": "The list of installed \"quirks\"",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "XRE-4621"
                    }
                },
                "mimeTypeExclusions": {
                    "type": "object",
                    "properties": {
                    }
                },
                "features": {
                    "type": "object",
                    "properties": {
                    }
                },
                "mimeTypes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "audio/mpeg"
                    }
                },
                "model": {
                    "type": "string",
                    "example": "PX051AEI"
                },
                "deviceType": {
                    "type": "string",
                    "example": "IpStb"
                },
                "supportsTrueSD": {
                    "type": "boolean",
                    "example": true
                },
                "webBrowser": {
                    "$ref": "#/definitions/webBrowser"
                },
                "HdrCapability": {
                    "summary": "e.g. HDR10,Dolby Vision,Technicolor Prime",
                    "type": "string",
                    "example": "none"
                },
                "canMixPCMWithSurround": {
                    "type": "boolean",
                    "example": true
                },
                "publicIP": {
                    "summary": "Public IP",
                    "type": "string",
                    "example": "12.34.56.78"
                }
            },
            "required": []
        },
        "graceInterval": {
            "summary": "The over temperature grace interval",
            "type": "string",
            "example": "600"
        },
        "territory":{
		    "summary":"territory name",
		    "type": "string",
		    "example":"USA"
	    },
        "region":{
		    "summary":"region name",
		    "type":"string",
		    "example":"US-NY"
	    },
        "startReason": {
            "summary": "Thunder start reason",
            "enum": [
                "NORMAL",
                "RESTART"
            ],
            "type": "string",
            "example": "NORMAL"
        }
    },
    "methods": {
        "cacheContains": {
            "deprecated" : true,
            "referenceUrl" : " https://rdkcentral.github.io/rdkservices/#/api/PersistentStorePlugin?id=getvalue",
            "summary": "Checks if a key is present in the cache.",
            "params": {
                "type": "object",
                "properties": {
                    "key": {
                        "$ref": "#/definitions/key"
                    }
                },
                "required": [
                    "key"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "clearLastDeepSleepReason":{
            "summary": "Clears the last deep sleep reason.",
            "result": {
                "$ref": "#/common/result"
            }
        },
        "deletePersistentPath": {
            "summary": "Deletes persistent path associated with a callsign.",
            "params": {
                "type":"object",
                "properties": {
                    "callsign": {
                        "description": "Callsign of the service to delete persistent path",
                        "type": "string",
                        "example": "HtmlApp"
                    },
                    "type": {
                        "description": "The type of execution environment. (can be used instead of callsign)",
                        "type": "string",
                        "example": "HtmlApp"
                    }
                },
                "required": [
                    ""
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "enableMoca":{
            "summary": "Enables (or disables) Moca support for the platform.",
            "params": {
                "type": "object",
                "properties": {
                    "value": {
                        "summary": "`true` to enable Moca support or `false` to disable Moca support.",
                        "type": "boolean",
                        "example": true
                    }
                },
                "required": [
                    "value"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "enableXREConnectionRetention":{
            "summary": "Enables (or disables) XRE Connection Retention option.",
            "params": {
                "type": "object",
                "properties": {
                    "enable": {
                        "summary": "`true` to enable XRE connection retention or `false` to disable.",
                        "type": "boolean",
                        "example": true
                    }
                },
                "required": [
                    "enable"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "fireFirmwarePendingReboot":{
            "summary": "Notifies the device about a pending reboot.",
            "events": {
                "onFirmwarePendingReboot" : "Triggers when the firmware has a pending reboot"
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "getAvailableStandbyModes": {
            "summary": "Queries the available standby modes.",
            "result": {
                "type": "object",
                "properties": {
                    "supportedStandbyModes": {
                        "summary": "The supported standby modes",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "LIGHT_SLEEP"
                        }
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "supportedStandbyModes",
                    "success"
                ]
            }
        },
        "getCachedValue":{
            "deprecated" : true,
            "referenceUrl" : "https://rdkcentral.github.io/rdkservices/#/api/PersistentStorePlugin?id=getvalue",
            "summary": "Gets the value of a key in the cache.",
            "params": {
                "type": "object",
                "properties": {
                    "key": {
                        "$ref": "#/definitions/key"
                    }
                },
                "required": [
                    "key"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "sampleKey": {
                        "summary": "Value for the specified key name",
                        "type": "string",
                        "example": "4343.3434"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "sampleKey",
                    "success"
                ]
            }
        },
        "getCoreTemperature":{
            "summary": "Returns the core temperature of the device. Not supported on all devices.",
            "result": {
                "type": "object",
                "properties": {
                    "temperature": {
                        "$ref": "#/definitions/temperature"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "temperature",
                    "success"
                ]
            }
        },
        "getDeviceInfo":{
            "summary": "Collects device details. Sample keys include:  \n* bluetooth_mac  \n* boxIP  \n* build_type  \n* estb_mac  \n* imageVersion  \n* rf4ce_mac  \n* wifi_mac.",
            "params": {
                "type": "object",
                "properties": {
                    "params": {
                        "summary": "A list of supported device keys",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "estb_mac"
                        }
                    }
                },
                "required": [
                    "params"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "estb_mac": {
                        "summary": "Value for the specified key name",
                        "type": "string",
                        "example": "20:F1:9E:EE:62:08"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "estb_mac",
                    "success"
                ]
            }
        },
        "getDownloadedFirmwareInfo":{
            "summary": "Returns information about firmware downloads.",
            "result": {
                "type": "object",
                "properties": {
                    "currentFWVersion": {
                        "summary": "The current firmware version",
                        "type": "string",
                        "example": "AX061AEI_VBN_1911_sprint_20200109040424sdy"
                    },
                    "downloadedFWVersion": {
                        "summary": "The downloaded firmware version",
                        "type": "string",
                        "example": "AX061AEI_VBN_1911_sprint_20200510040450sdy"
                    },
                    "downloadedFWLocation": {
                        "summary": "The location of the downloaded firmware",
                        "type": "string",
                        "example": "/tmp"
                    },
                    "isRebootDeferred": {
                        "summary": "Whether the device should be rebooted",
                        "type": "boolean",
                        "example": false
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "currentFWVersion",
                    "downloadedFWVersion",
                    "downloadedFWLocation",
                    "isRebootDeferred",
                    "success"
                ]
            }
        },
        "getFirmwareDownloadPercent": {
            "summary": "Gets the current download percentage.",
            "result": {
                "type": "object",
                "properties": {
                    "downloadPercent": {
                        "summary": "The percentage completed",
                        "type": "integer",
                        "example": 25
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "downloadPercent",
                    "success"
                ]
            }
        },
        "getFirmwareUpdateInfo":{
            "summary": "Checks the firmware update information.",
            "events": {
                "onFirmwareUpdateInfoReceived" : "Triggers when the firmware update information is requested"
            },
            "params": {
                "type": "object",
                "properties": {
                    "GUID": {
                        "$ref": "#/definitions/GUID"
                    }
                },
                "required": []
            },
            "result": {
                "type": "object",
                "properties": {
                    "asyncResponse": {
                        "$ref": "#/definitions/asyncResponse"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "asyncResponse",
                    "success"
                ]
            }
        },
        "getFirmwareUpdateState":{
            "summary": "Checks the state of the firmware update.",
            "result": {
                "type": "object",
                "properties": {
                    "firmwareUpdateState": {
                        "$ref": "#/definitions/firmwareUpdateState"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "firmwareUpdateState",
                    "success"
                ]
            }
        },
        "getLastDeepSleepReason":{
            "summary": "Retrieves the last deep sleep reason.",
            "result": {
                "type": "object",
                "properties": {
                    "reason": {
                        "summary": "The deep sleep reason",
                        "type": "string",
                        "example": "thermal_deepsleep_critical_threshold"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "reason",
                    "success"
                ]
            }
        },
        "getLastFirmwareFailureReason": {
            "summary": "Retrieves the last firmware failure reason.",
            "result": {
                "type": "object",
                "properties": {
                    "failReason": {
                        "summary": "The reason the failure occurred",
                        "type": "string",
                        "example": "Image Download Failed - Unable to connect"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "failReason",
                    "success"
                ]
            }
        },
        "getLastWakeupKeyCode":{
            "summary": "Returns the last wakeup keycode.",
            "result": {
                "type": "object",
                "properties": {
                    "wakeupKeyCode": {
                        "summary": "The last wakeup keycode",
                        "type": "string",
                        "example": "59"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "wakeupKeyCode",
                    "success"
                ]
            }
        },
        "getMacAddresses":{
            "summary": "Gets the MAC address of the device.",
            "events": {
                "onMacAddressesRetreived" : "Triggers when the MAC addresses are requested"
            },
            "params": {
                "type": "object",
                "properties": {
                    "GUID": {
                        "$ref": "#/definitions/GUID"
                    }
                },
                "required": []
            },
            "result": {
                "type": "object",
                "properties": {
                    "asyncResponse": {
                        "$ref": "#/definitions/asyncResponse"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "asyncResponse",
                    "success"
                ]
            }
        },
        "getMfgSerialNumber": {
            "summary": "Gets the Manufacturing Serial Number.",
            "result": {
                "type": "object",
                "properties": {
                    "mfgSerialNumber": {
                        "summary": "Manufacturing Serial Number",
                        "type": "string",
                        "example": "F00020CE000003"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "mfgSerialNumber",
                    "success"
                ]
            }
        },
        "getMilestones": {
	        "deprecated" : true,
            "referenceUrl" : "https://rdkcentral.github.io/rdkservices/#/api/DeviceDiagnosticsPlugin?id=getmilestones",
            "summary": "Returns the list of milestones.",
            "result": {
                "type": "object",
                "properties": {
                    "milestones": {
                        "summary": "A string [] of milestones",
                        "type": "array",
                        "items": {
                            "type":"string",
                            "example": "2020 Jan 28 08:24:06.762355 arrisxi6 systemd[1]: Starting Log RDK Started Service..."
                        }
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "milestones",
                    "success"
                ]
            }
        },
        "getMode":{
            "summary": "Returns the currently set mode information.",
            "result": {
                "type": "object",
                "properties": {
                    "modeInfo": {
                        "$ref": "#/definitions/modeInfo"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "modeInfo",
                    "success"
                ]
            }
        },
        "getNetworkStandbyMode": {
            "summary": "Returns the network standby mode of the device. If network standby is `true`, the device supports `WakeOnLAN` and `WakeOnWLAN` actions in STR (S3) mode.",
            "result": {
                "type": "object",
                "properties": {
                    "nwStandby": {
                        "$ref": "#/definitions/nwStandby"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "nwStandby",
                    "success"
                ]
            }
        },
        "getOvertempGraceInterval": {
            "summary": "Returns the over-temperature grace interval value. Not supported on all devices.",
            "result": {
                "type": "object",
                "properties": {
                    "graceInterval": {
                        "$ref": "#/definitions/graceInterval"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "graceInterval",
                    "success"
                ]
            }
        },
        "getPlatformConfiguration": {
            "summary": "Returns the supported features and device/account info.",
            "params": {
                "type": "object",
                "properties": {
                    "query": {
                        "description": "Query for support of a particular feature, e.g. AccountInfo.accountId",
                        "type": "string"
                    }
                }
            },
            "result": {
                "type": "object",
                "properties": {
                    "AccountInfo": {
                        "$ref": "#/definitions/accountInfo"
                    },
                    "DeviceInfo": {
                        "$ref": "#/definitions/deviceInfo"
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "success"
                ]
            }
        },
        "getPowerState":{
            "summary": "Returns the power state of the device.",
            "result": {
                "type": "object",
                "properties": {
                    "powerState": {
                        "$ref": "#/definitions/powerState"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "powerState",
                    "success"
                ]
            }
        },
        "getPowerStateBeforeReboot":{
            "summary": "Returns the power state before reboot.",
            "result": {
                "type": "object",
                "properties": {
                    "state": {
                        "summary": "The power state",
                        "type": "string",
                        "example": "ON"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "state",
                    "success"
                ]
            }
        },
        "getPowerStateIsManagedByDevice": {
            "summary": "Checks whether the power state is managed by the device.",
            "result": {
                "type": "object",
                "properties": {
                    "powerStateManagedByDevice": {
                        "summary": "`true` if power state is managed by the device, `false` otherwise",
                        "type": "boolean",
                        "example": false
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "powerStateManagedByDevice",
                    "success"
                ]
            }
        },
        "getPreferredStandbyMode":{
            "summary": "Returns the preferred standby mode. This method returns an empty string if the preferred mode has not been set.",
            "result": {
                "type": "object",
                "properties": {
                    "preferredStandbyMode": {
                        "$ref": "#/definitions/preferredStandbyMode"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "preferredStandbyMode",
                    "success"
                ]
            }
        },
        "getPreviousRebootInfo":{
            "summary": "Returns basic information about a reboot.",
            "result": {
                "type": "object",
                "properties": {
                    "timestamp": {
                        "summary": "The last reboot time",
                        "type": "string",
                        "example": "20200128083540"
                    },
                    "reason": {
                        "$ref": "#/definitions/reason"
                    },
                    "source": {
                        "summary": "Source that trigerred reboot",
                        "type": "string",
                        "example": "-sh"
                    },
                    "customReason": {
                        "summary": "A custom reason",
                                "type": "string",
                                "example": "API Validation"
                    },
                    "otherReason": {
                        "summary": "Other reasons for reboot",
                        "type": "string",
                        "example": "API Validation"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "timestamp",
                    "reason",
                    "source",
                    "customReason",
                    "otherReason",
                    "success"
                ]
            }
        },
        "getPreviousRebootInfo2":{
            "summary": "Returns detailed information about a reboot.",
            "result": {
                "type": "object",
                "properties": {
                    "rebootInfo" :{
                        "type": "object",
                        "properties": {
                            "timestamp": {
                                "$ref": "#/definitions/timestamp"
                            },
                            "source": {
                                "$ref": "#/definitions/source"
                            },
                            "reason": {
                                "$ref": "#/definitions/reason"
                            },
                            "customReason":{
                                "summary": "A custom reason",
                                "type": "string",
                                "example": "API Validation"
                            },
                            "lastHardPowerReset": {
                                "summary": "The timestamp of the last hard power reset",
                                "type": "string",
                                "example": "Tue Jan 28 08:22:22 UTC 2020"
                            }
                        },
                        "required": [
                            "timestamp",
                            "source",
                            "reason",
                            "customReason",
                            "lastHardPowerReset"
                        ]
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "rebootInfo",
                    "success"
                ]
            }
        },
        "getPreviousRebootReason":{
            "summary": "Returns the last reboot reason.",
            "result": {
                "type": "object",
                "properties": {
                    "reason": {
                        "$ref": "#/definitions/reason"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "reason",
                    "success"
                ]
            }
        },
        "getRFCConfig":{
            "summary": "Returns information that is related to RDK Feature Control (RFC) configurations.",
            "params": {
                "type": "object",
                "properties": {
                    "rfcList": {
                        "summary": "A list of RFC properties to query",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Device.DeviceInfo.X_RDKCENTRAL-COM_RFC.Feature.AccountInfo.AccountID"
                        }
                    }
                },
                "required": [
                    "rfcList"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "RFCConfig": {
                        "summary": "A list of specified RFC properties",
                        "type": "object",
                        "properties": {
                            "Device.DeviceInfo.X_RDKCENTRAL-COM_RFC.Feature.AccountInfo.AccountID": {
                                "type":"string",
                                "example": "1181405614235499371"
                            }
                        },
                        "required": [
                            ""
                        ]
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "RFCConfig",
                    "success"
                ]
            }
        },
        "getSerialNumber":{
            "summary": "Returns the device serial number.",
            "result": {
                "type": "object",
                "properties": {
                    "serialNumber": {
                        "summary": "The serial number",
                        "type": "string",
                        "example": "M11806TK0024"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "serialNumber",
                    "success"
                ]
            }
        },
        "getStateInfo":{
            "summary": "Queries device state information of various properties.",
            "params": {
                "type": "object",
                "properties": {
                    "param": {
                        "summary": "The property to query as a string",
                        "type": "string",
                        "example": "com.comcast.channel_map"
                    }
                },
                "required": [
                    "param"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "com.comcast.channel_map": {
                        "summary": "The specified property",
                        "type": "number",
                        "example": 2
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "success"
                ]
            }
        },
        "getStoreDemoLink":{
            "summary": "Returns the store demo video link.",
            "result": {
                "type": "object",
                "properties": {
                    "fileURL": {
                        "summary": "The file URL of stored demo video",
                        "type": "string",
                        "example": "http://127.0.0.1:50050/store-mode-video/videoFile.mp4"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "success"
                ]
            }
        },
        "getSystemVersions":{
            "summary": "Returns system version details.",
            "result": {
                "type": "object",
                "properties": {
                    "stbVersion": {
                        "summary": "The STB version",
                        "type": "string",
                        "example": "AX061AEI_VBN_1911_sprint_20200109040424sdy"
                    },
                    "receiverVersion": {
                        "summary": "The receiver version",
                        "type": "string",
                        "example": "3.14.0.0"
                    },
                    "stbTimestamp": {
                        "summary": "The STB timestamp",
                        "type": "string",
                        "example": "Thu 09 Jan 2020 04:04:24 AP UTC"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "stbVersion",
                    "receiverVersion",
                    "stbTimestamp",
                    "success"
                ]
            }
        },
        "getTemperatureThresholds":{
            "summary": "Returns temperature threshold values. Not supported on all devices.",
            "result": {
                "type": "object",
                "properties": {
                    "temperatureThresholds" :{
                        "type": "object",
                        "properties": {
                            "WARN": {
                                "$ref": "#/definitions/WARN"
                            },
                            "MAX": {
                                "$ref": "#/definitions/MAX"
                            },
                            "temperature": {
                                "$ref": "#/definitions/temperature"
                            }
                        },
                        "required": [
                            "WARN",
                            "MAX",
                            "temperature"
                        ]
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "temperatureThresholds",
                    "success"
                ]
            }
        },
        "getFriendlyName":{
            "summary": "Returns the friendly name set by setFriendlyName API or default value.",
            "result": {
                "type":"object",
                "properties": {
                    "friendlyName": {
                        "$ref": "#/definitions/friendlyName"
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "friendlyName",
                    "success"
                ]
            }
        },
        "getTerritory":{
            "summary": "Gets the configured system territory and region. Territory is a ISO-3166-1 alpha-3 standard (see https://en.wikipedia.org/wiki/ISO_3166-1). Region is a ISO-3166-2 alpha-2 standard (see https://en.wikipedia.org/wiki/ISO_3166-2).",
            "result":{
                "type" : "object",
                "properties": {
                    "territory":{
                        "$ref":"#/definitions/territory"
                    },
                    "region":{
                        "$ref":"#/definitions/region"
                    },
                    "success":{
                            "$ref": "#/common/success"
                        }
                },
                "required": [
                    "territory",
                    "region",
                    "success"
                ]
            }		
        },
        "getTimeZones":{
            "summary": "(Version2) Gets the available timezones from the system's time zone database. This method is useful for determining time offsets per zone.",
            "result": {
                "type": "object",
                "properties": {
                    "zoneinfo": {
                        "summary": "A timezone area",
                        "type": "object",
                        "properties": {
                            "America": {
                                "type": "object",
                                "properties": {
                                    "New_York": {
                                        "type": "string",
                                        "example": "Thu Nov 5 15:21:17 2020 EST"
                                    },
                                    "Los_Angeles": {
                                        "type": "string",
                                        "example": "Thu Nov 5 12:21:17 2020 PST"
                                    }
                                },
                                "required": [
                                    ""
                                ]
                            },
                            "Europe": {
                                "type": "object",
                                "properties": {
                                    "London": {
                                        "type": "string",
                                        "example": "Thu Nov 5 14:21:18 2020 CST"
                                    }
                                },
                                "required": [
                                    ""
                                ]
                            }
                        },
                        "required": []
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "zoneinfo",
                    "success"
                ]
            }
        },
        "getTimeZoneDST":{
            "summary": "Get the configured time zone from the file referenced by `TZ_FILE`. If the time zone is not set, then `null` is returned.",
            "result": {
                "type": "object",
                "properties": {
                    "timeZone": {
                        "$ref": "#/definitions/timeZone"
                    },
                    "accuracy": {
                        "$ref": "#/definitions/timeZoneAccuracy"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "timeZone",
                    "accuracy",
                    "success"
                ]
            }
        },
        "getWakeupReason":{
            "summary": "Returns the reason for the device coming out of deep sleep.",
            "result": {
                "type": "object",
                "properties": {
                    "wakeupReason": {
                        "summary": "The reason",
                        "enum": [
                            "WAKEUP_REASON_IR",
                            "WAKEUP_REASON_RCU_BT",
                            "WAKEUP_REASON_RCU_RF4CE",
                            "WAKEUP_REASON_GPIO",
                            "WAKEUP_REASON_LAN",
                            "WAKEUP_REASON_WLAN",
                            "WAKEUP_REASON_TIMER",
                            "WAKEUP_REASON_FRONT_PANEL",
                            "WAKEUP_REASON_WATCHDOG",
                            "WAKEUP_REASON_SOFTWARE_RESET",
                            "WAKEUP_REASON_THERMAL_RESET",
                            "WAKEUP_REASON_WARM_RESET",
                            "WAKEUP_REASON_COLDBOOT",
                            "WAKEUP_REASON_STR_AUTH_FAILURE",
                            "WAKEUP_REASON_CEC",
                            "WAKEUP_REASON_PRESENCE",
                            "WAKEUP_REASON_VOICE",
                            "WAKEUP_REASON_UNKNOWN"
                        ],
                        "type": "string",
                        "example": "WAKEUP_REASON_VOICE"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "wakeupReason",
                    "success"
                ]
            }
        },
        "getXconfParams":{
            "summary": "Returns XCONF configuration parameters for the device.",
            "result": {
                "type": "object",
                "properties": {
                    "xconfParams": {
                        "summary": "A timezone area",
                        "type": "object",
                        "properties": {
                            "env": {
                                "summary": "The environment",
                                "type": "string",
                                "example": "vbn"
                            },
                            "eStbMac": {
                                "summary": "The embedded set-top box MAC address",
                                "type": "string",
                                "example": "20:F1:9E:EE:62:08"
                            },
                            "model": {
                                "summary": "The device model number",
                                "type": "string",
                                "example": "AX061AEI"
                            },
                            "firmwareVersion": {
                                "summary": "The firmware version",
                                "type": "string",
                                "example": "AX061AEI_VBN_1911_sprint_20200109040424sdy"
                            }
                        },
                        "required": [
                            "env",
                            "eStbMac",
                            "model",
                            "firmwareVersion"
                        ]
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "xconfParams",
                    "success"
                ]
            }
        },
        "isGzEnabled":{
	    "deprecated" : true,
            "summary": "Checks whether GZ is enabled.",
            "result": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "$ref": "#/definitions/enabled"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "enabled",
                    "success"
                ]
            }
        },
        "isOptOutTelemetry": {
            "summary": "Checks the telemetry opt-out status.",
            "result": {
                "type": "object",
                "properties": {
                    "Opt-Out": {
                        "$ref": "#/definitions/Opt-Out"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "Opt-Out",
                    "success"
                ]
            }

        },
        "queryMocaStatus":{
            "summary": "Checks whether MOCA is enabled.",
            "result": {
                "type": "object",
                "properties": {
                    "mocaEnabled": {
                        "summary": "`true` if MOCA is enabled, otherwise `false`",
                        "type": "boolean",
                        "example": true
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "mocaEnabled",
                    "success"
                ]
            }
        },
        "reboot":{
            "summary": "Requests that the system performs a reboot of the set-top box.",
            "events": {
                "onRebootRequest" : "Triggers when a device reboot request is made"
            },
            "params": {
                "type":"object",
                "properties": {
                    "rebootReason": {
                        "$ref": "#/definitions/reason"
                    }
                },
                "required": [
                    "rebootReason"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "IARM_Bus_Call_STATUS": {
                        "summary": "IARM BUS status",
                        "type": "integer",
                        "example": 0
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "IARM_Bus_Call_STATUS",
                    "success"
                ]
            }
        },
        "removeCacheKey":{
            "deprecated" : true,
            "referenceUrl" : "https://rdkcentral.github.io/rdkservices/#/api/PersistentStorePlugin?id=deletekey",
            "summary": "Removes the cache key.",
            "params": {
                "type":"object",
                "properties": {
                    "key": {
                        "$ref": "#/definitions/key"
                    }
                },
                "required": [
                    "key"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "requestSystemUptime":{
            "summary": "Returns the device uptime.",
            "result": {
                "type": "object",
                "properties": {
                    "systemUptime": {
                        "summary": "The uptime, in seconds, of the device",
                        "type": "string",
                        "example": "1655.92"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "systemUptime",
                    "success"
                ]
            }
        },
        "setBootLoaderPattern":{
            "summary": "Sets the boot loader pattern mode in MFR.",
            "params": {
                "type":"object",
                "properties": {
                    "pattern": {
                        "$ref": "#/definitions/pattern"
                    }
                },
                "required": [
                    "pattern"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "setCachedValue": {
            "deprecated" : true,
            "referenceUrl" : "https://rdkcentral.github.io/rdkservices/#/api/PersistentStorePlugin?id=setvalue",
            "summary": "Sets the value for a key in the cache.",
            "params": {
                "type":"object",
                "properties": {
                    "key": {
                        "$ref": "#/definitions/key"
                    },
                    "value":{
                        "summary": "The value to set",
                        "type": "number",
                        "example": "4343.3434"
                    }
                },
                "required": [
                    "key",
                    "value"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "setDeepSleepTimer": {
            "summary": "Sets the deep sleep timeout period.",
            "params": {
                "type":"object",
                "properties": {
                    "seconds": {
                        "$ref": "#/definitions/seconds"
                    }
                },
                "required": [
                    "seconds"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "setFirmwareAutoReboot": {
            "summary": "Enables or disables the AutoReboot Feature. This method internally sets the tr181 `AutoReboot.Enable` parameter to `true` or `false`.",
            "params": {
                "type":"object",
                "properties": {
                    "enable": {
                        "summary": "`true` to enable Autoreboot or `false` to disable",
                        "type": "boolean",
                        "example": true
                    }
                },
                "required": [
                    "enable"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "setFirmwareRebootDelay": {
            "summary": "Delays the firmware reboot.",
            "params": {
                "type":"object",
                "properties": {
                    "delaySeconds": {
                        "summary": "The reboot delay in seconds",
                        "type": "integer",
                        "example": 60
                    }
                },
                "required": [
                    "delaySeconds"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "setGzEnabled": {
            "deprecated" : true,
            "summary": "Enables or disables GZ.",
            "params": {
                "type":"object",
                "properties": {
                    "enabled": {
                        "$ref": "#/definitions/enabled"
                    }
                },
                "required": [
                    "enabled"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "setMode":{
            "summary": "Sets the mode of the set-top box for a specific duration before returning to normal mode. Valid modes are:  \n* `NORMAL` - The set-top box is operating in normal mode.  \n* `EAS` - The set-top box is operating in Emergency Alert System (EAS) mode. This mode is set when the device needs to perform certain tasks when entering EAS mode, such as setting the clock display or preventing the user from using the diagnostics menu.  \n* `WAREHOUSE` - The set-top box is operating in warehouse mode.",
            "events": {
                "onSystemModeChanged" : "Triggers when the system mode is changed successfully"
            },
            "params": {
                "type":"object",
                "properties": {
                    "modeInfo": {
                        "$ref": "#/definitions/modeInfo"
                    }
                },
                "required": [
                    "modeInfo"                    
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }            
        },
        "setNetworkStandbyMode":{
            "summary": "This API will be deprecated in the future. Please refer setWakeupSrcConfiguration to Migrate. This API Enables or disables the network standby mode of the device. If network standby is enabled, the device supports `WakeOnLAN` and `WakeOnWLAN` actions in STR (S3) mode.",
            "params": {
                "type":"object",
                "properties": {
                    "nwStandby": {
                        "$ref": "#/definitions/nwStandby"
                    }
                },
                "required": [
                    "nwStandby"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "setOptOutTelemetry": {
            "summary": "Sets the telemetry opt-out status.",
            "params": {
                "type":"object",
                "properties": {
                    "Opt-Out": {
                        "$ref": "#/definitions/Opt-Out"
                    }
                },
                "required": [
                    "Opt-Out"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "setOvertempGraceInterval":{
            "summary": "Sets the over-temperature grace interval value. Not supported on all devices.",
            "params": {
                "type": "object",
                "properties": {
                    "graceInterval": {
                        "$ref": "#/definitions/graceInterval"
                    }
                },
                "required": [
                    "graceInterval"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "setPowerState":{
            "summary": "Sets the power state of the device.",
            "events": {
                "onSystemPowerStateChanged" : "Triggers when the system power state changes"
            },
            "params": {
                "type":"object",
                "properties": {
                    "powerState": {
                        "$ref": "#/definitions/powerState"
                    },
                    "standbyReason": {
                        "summary": "The reason for a standby state",
                        "type": "string",
                        "example": "APIUnitTest"
                    }
                },
                "required": [
                    "powerState",
                    "standbyReason"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "setPreferredStandbyMode":{
            "summary": "Sets and persists the preferred standby mode. See [getAvailableStandbyModes](#getAvailableStandbyModes) for valid modes. Invoking this function does not change the power state of the device. It only sets the user preference for the preferred action when the [setPowerState](#setPowerState) method is invoked with a value of `STANDBY`.",
            "params": {
                "type":"object",
                "properties": {
                    "standbyMode": {
                        "$ref": "#/definitions/preferredStandbyMode"
                    }
                },
                "required": [
                    "standbyMode"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "setTemperatureThresholds":{
            "summary": "Sets the temperature threshold values. Not supported on all devices.",
            "params": {
                "type":"object",
                "properties": {
                    "thresholds" :{
                        "type": "object",
                        "properties": {
                            "WARN": {
                                "$ref": "#/definitions/WARN"
                            },
                            "MAX": {
                                "$ref": "#/definitions/MAX"
                            }
                        },
                        "required": [
                            "WARN",
                            "MAX"
                        ]
                    }
                },
                "required": [
                    "thresholds"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "setFriendlyName":{
            "summary": "Sets the friendly name of device. It allows an applications to set friendly name value which could be used by different applications to list this device on client mobile application. The provided name should not be empty. Friendly name is persisted on device and reuse after each reboot until updated by the user",
            "params": {
                "type":"object",
                "properties": {
                    "friendlyName": {
                        "$ref": "#/definitions/friendlyName"
                    }
                },
                "required": [
                    "friendlyName"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "setTerritory":{
            "summary": "Sets the system territory and region.Territory is a ISO-3166-1 alpha-3 standard (see https://en.wikipedia.org/wiki/ISO_3166-1). Region is a ISO-3166-2 alpha-2 standard (see https://en.wikipedia.org/wiki/ISO_3166-2).",
			"events":{
                "onTerritoryChanged": "Triggered when territory is set"
            },
            "params": {
                "type" :"object",
                "properties": {
                    "territory":{
                        "$ref":"#/definitions/territory"
                    },
                    "region":{
                        "$ref":"#/definitions/region"
                    }
                },
                "required": [
                    "territory"
                ]
            },
            "result":{
                "$ref": "#/common/result"
            }
        },
        "setTimeZoneDST":{
            "summary": "Sets the system time zone. See `getTimeZones` to get a list of available timezones on the system.",
			"events":{
                "onTimeZoneDSTChanged": "Triggered when device time zone changed"
            },
            "params": {
                "type":"object",
                "properties": {
                    "timeZone": {
                        "$ref": "#/definitions/timeZone"
                    },
                    "accuracy": {
                        "$ref": "#/definitions/timeZoneAccuracy"
                    }
                },
                "required": [
                    "timeZone"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "setWakeupSrcConfiguration":{
            "summary": "Sets the wakeup source configuration for the input powerState. if you are using setNetworkStandbyMode API, Please do not use this API to set LAN and WIFI wakeup. Please migrate to setWakeupSrcConfiguration API to control all wakeup source settings. This API does not persist. Please call this API on Every bootup to set the values.",
            "params": {
                "type": "object",
                "properties": {
                    "powerState": {
                        "$ref": "#/definitions/powerState"
                    },
                    "wakeupSources": {
                        "$ref": "#/definitions/wakeupSources"
                    }
                },
                "required": [
                    "wakeupSources"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "getWakeupSrcConfiguration":{
            "summary": "Returns all the supported wakeup configurations and powerState",
            "result": {
                "type": "object",
                "properties": {
                    "powerState": {
                        "$ref": "#/definitions/powerState"
                    },
                    "wakeupSources": {
                        "$ref": "#/definitions/wakeupSources"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "powerState",
                    "wakeupSources",
                    "success"
                ]
            }
        },
        "updateFirmware":{
            "summary": "Initiates a firmware update. This method has no affect if an update is not available.",
            "result": {
                "$ref": "#/common/result"
            }
        },
        "uploadLogs": {
            "summary": "Uploads logs to a URL returned by SSR.",
            "params": {
                "type": "object",
                "properties": {
                    "url": {
                        "summary": "SSR URL",
                        "type": "string",
                        "default": "https://ssr.ccp.xcal.tv/cgi-bin/rdkb_snmp.cgi"
                    }
                },
                "required": [
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "uploadLogsAsync": {
            "summary": "Starts background process to upload logs",
            "events": {
                "onLogUpload" : "Triggered when logs upload process is done"
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "abortLogUpload": {
            "summary": "Stops background process to upload logs",
            "events": {
                "onLogUpload" : "Triggered when logs upload process is stopped"
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "getThunderStartReason":{
            "summary": "Returns the Thunder start reason.",
            "result": {
                "type": "object",
                "properties": {
                    "startReason": {
                        "$ref": "#/definitions/startReason"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "startReason",
                    "success"
                ]
            }
        }
    },
    "events": {
        "onFirmwarePendingReboot":{
            "summary": "Triggered when the `fireFirmwarePendingReboot` method is invoked",
            "params": {
                "type" :"object",
                "properties": {
                    "fireFirmwarePendingReboot": {
                        "$ref": "#/definitions/seconds"
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "fireFirmwarePendingReboot",
                    "success"
                ]
            }               
        },
        "onFirmwareUpdateInfoReceived":{
            "summary": "Triggered when the `getFirmwareUpdateInfo` asynchronous method is invoked.  \nUpdate details are:  \n* `0` - A new firmware version is available.  \n* `1` - The firmware version is at the current version.  \n* `2` - XCONF did not return a firmware version (timeout or other XCONF error).  \n* `3` - The device is configured not to update the firmware (`swupdate.conf` exists on the device)",
            "params": {
                "type" :"object",
                "properties": {
                    "status": {
                        "summary": "The firmware update status",
                        "type": "integer",
                        "example": 0
                    },
                    "responseString":{
                        "summary": "A custom response",
                        "type": "string",
                        "example": ""
                    },
                    "firmwareUpdateVersion": {
                        "summary": "The next firmware update version",
                        "type": "string",
                        "example": "AX061AEI_VBN_1911_sprint_20200109040424sdy"
                    },
                    "rebootImmediately": {
                        "summary": "The value `true` indicates that the device has to be rebooted immediately or `false` otherwise",
                        "type": "boolean",
                        "example": true
                    },
                    "updateAvailable":{
                        "summary": "The value `false` indicates that there is no update available, either because there was no firmware update version returned from XCONF, or because the version returned from XCONF matches the version already on the device. The value of `true` indicates there is a firmware version available for update.",
                        "type": "boolean",
                        "example": true
                    },
                    "updateAvailableEnum":{
                        "summary": "The update available details",
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "type": "integer",
                        "example": 0
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "status",
                    "responseString",
                    "rebootImmediately",
                    "updateAvailable",
                    "updateAvailableEnum",
                    "success"
                ]
            }
        },
        "onFirmwareUpdateStateChange":{
            "summary": "Triggered when the state of a firmware update changes.  \nState details are:  \n* `0`: Uninitialized - there is no firmware update in progress  \n* `1`: Requesting - requesting firmware update information  \n* `2`: Downloading  \n* `3`: Failed  \n* `4`: Download Complete  \n* `5`: Validation Complete  \n* `6`: Preparing to Reboot",
            "params": {
                "type" :"object",
                "properties": {
                    "firmwareUpdateStateChange": {
                        "$ref": "#/definitions/firmwareUpdateState"
                    }
                },
                "required": [
                    "firmwareUpdateStateChange"
                ]
            }
        },
        "onMacAddressesRetreived":{
            "summary": "Triggered when the `getMacAddresses` asynchronous method is invoked",
            "params": {
                "type" :"object",
                "properties": {
                    "ecm_mac":{
                        "summary": "The embedded cable modem MAC address",
                        "type": "string",
                        "example": "A8:11:XX:FD:0C:XX"
                    },
                    "estb_mac":{
                        "summary": "The embedded set-top box MAC address",
                        "type": "string",
                        "example": "A8:11:XX:FD:0C:XX"
                    },
                    "moca_mac":{
                        "summary": "The MOCA MAC address",
                        "type": "string",
                        "example": "00:15:5F:XX:20:5E:57:XX"
                    },
                    "eth_mac": {
                        "summary": "The Ethernet MAC address",
                        "type": "string",
                        "example": "A8:11:XX:FD:0C:XX"
                    },
                    "wifi_mac":{
                        "summary": "The Wifi MAC address",
                        "type": "string",
                        "example": "A8:11:XX:FD:0C:XX"
                    },
                    "bluetooth_mac":{
                        "summary": "The Bluetooth MAC address",
                        "type": "string",
                        "example": "AA:AA:AA:AA:AA:AA"
                    },
                    "rf4ce_mac":{
                        "summary": "The Rf4ce MAC address",
                        "type": "string",
                        "example": "00:00:00:00:00:00"
                    },
                    "info":{
                        "summary": "Additional information (only if any of the above data is missing)",
                        "type": "string",
                        "example": "Details fetch: all are not success"
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "ecm_mac",
                    "estb_mac",
                    "moca_mac",
                    "eth_mac",
                    "wifi_mac",
                    "bluetooth_mac",
                    "rf4ce_mac",
                    "success"
                ]
            }            
        },
        "onNetworkStandbyModeChanged":{
            "summary": "Triggered when the network standby mode setting changes",
            "params": {
                "type" :"object",
                "properties": {
                    "nwStandby": {
                        "summary": "Network standby mode",
                        "type": "boolean",
                        "example": true
                    }
                },
                "required": [
                    "nwStandby"
                ]
            }
        },
        "onRebootRequest":{
            "summary": "Triggered when an application invokes the reboot method",
            "params": {
                "type" :"object",
                "properties": {
                    "requestedApp": {
                        "$ref": "#/definitions/source"
                    },
                    "rebootReason": {
                        "$ref": "#/definitions/reason"
                    }
                },
                "required": [
                    "requestedApp",
                    "rebootReason"
                ]
            }
        },
        "onSystemClockSet":{
            "summary": "Triggered when the clock on the set-top device is updated"
        },
        "onSystemModeChanged":{
            "summary": "Triggered when the device operating mode changes",
            "params": {
                "type" :"object",
                "properties": {
                    "mode": {
                        "$ref": "#/definitions/mode"
                    }
                },
                "required": [
                    "mode"
                ]
            }
        },
        "onSystemPowerStateChanged":{
            "summary": "Triggered when the power manager detects a device power state change",
            "params": {
                "type" :"object",
                "properties": {
                    "powerState": {
                        "$ref": "#/definitions/powerState"
                    },
                    "currentPowerState": {
                        "summary": "The current power state",
                        "type": "string",
                        "example": "ON"
                    }
                },
                "required": [
                    "powerState",
                    "currentPowerState"
                ]
            }
        },
        "onFriendlyNameChanged":{
            "summary": "Triggered when the device friendly name change",
            "params": {
                "type" :"object",
                "properties": {
                    "friendlyName": {
                        "$ref": "#/definitions/friendlyName"
                    }
                },
                "required": [
                    "friendlyName"
                ]
            }
        },
        "onTemperatureThresholdChanged":{
            "summary": "Triggered when the device temperature changes beyond the `WARN` or `MAX` limits (see `setTemperatureThresholds`). Not supported on all devices.",
            "params": {
                "type" :"object",
                "properties": {
                    "thresholdType": {
                        "summary": "The exceeded threshold",
                        "enum": [
                            "MAX",
                            "MIN"
                        ],
                        "type": "string",
                        "example": "MAX"
                    },
                    "exceeded": {
                        "summary": "Whether the threshold exceeded the configured value",
                        "type": "boolean",
                        "example": true
                    },
                    "temperature":{
                        "$ref": "#/definitions/temperature"
                    }
                },
                "required": [
                    "thresholdType",
                    "exceeded",
                    "temperature"
                ]
            }
        },
		"onTerritoryChanged":{
            "summary": "Triggered when the device territory changed",
            "params": {
                "type" :"object",
                "properties": {
                "oldTerritory": {
                        "summary": " old territory",
                        "type": "string",
                        "example":"GBR"
                },
                "newTerritory":{
                    "summary": " new territory",
                    "type": "string",
                    "example": "USA"
                },
                "oldRegion":{
                    "summary": "old region",
                    "type":"string",
                    "example": "GB-ENG"
                },
                "newRegion":{
                    "summary": "new region",
                    "type":"string",
                    "example": "US-NY"
                }
				},
                "required":[
                    "oldTerritory",
                    "newTerritory",
                    "oldRegion",
                    "newRegion"
                ]
            }
        },
		"onTimeZoneDSTChanged":{
            "summary": "Triggered when device time zone changed",
            "params": {
                "type": "object",
                "properties": {
                "oldTimeZone":{
                        "summary": "old time zone",
                        "type": "string",
                        "example":"America/New_York"
                },
                "newTimeZone":{
                        "summary": "new time zone",
                        "type": "string",
                        "example":"Europe/London"
                },
                "oldAccuracy":{
                        "summary": "old time zone accuracy",
                        "type": "string",
                        "example":"INITIAL"
                },
                "newAccuracy":{
                        "summary": "new time zone accuracy",
                        "type": "string",
                        "example":"FINAL"
                }
				},
                "required":[
                    "oldTimeZone",
                    "newTimeZone",
                    "oldAccuracy",
                    "newAccuracy"
                    ]
            }
        },
        "onLogUpload":{
            "summary": "Triggered when logs upload process is done or stopped",
            "params": {
                "type": "object",
                "properties": {
                    "logUploadStatus":{
                        "summary": "Upload status",
                        "type":"string",
                        "enum": [
                            "UPLOAD_SUCCESS",
                            "UPLOAD_FAILURE",
                            "UPLOAD_ABORTED"
                        ],
                        "example":"UPLOAD_SUCCESS"
                    }
                },
                "required":[
                    "logUploadStatus"
                ]
            }
        }
    }
}
